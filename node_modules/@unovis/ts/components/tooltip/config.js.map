{"version":3,"file":"config.js","sources":["../../../src/components/tooltip/config.ts"],"sourcesContent":["/* eslint-disable no-irregular-whitespace */\nimport { ComponentCore } from 'core/component'\n\n// Types\nimport { Position } from 'types/position'\n\nexport interface TooltipConfigInterface {\n  /** An array of visualization components to interact with. Default: `[]` */\n  components?: ComponentCore<unknown>[];\n  /** Container to where the Tooltip component should be inserted. Default: `undefined` */\n  container?: HTMLElement;\n  /** Follow the mouse cursor. If `true`, the tooltip can't be hovered over\n   * even when `allowHover` is set to `true`. Default: `true` */\n  followCursor?: boolean;\n  /** Allow the tooltip to be hovered over and interacted with when `followCursor` is set to `false`.\n   * Default: `true` */\n  allowHover?: boolean;\n  /** Horizontal placement of the tooltip. Default: `Position.Auto` */\n  horizontalPlacement?: Position | string | undefined;\n  /** Horizontal shift of the tooltip in pixels. Works only with\n   * `horizontalPlacement` set to `Position.Left` or `Position.Right`.\n   * Default: `0` */\n  horizontalShift?: number;\n  /** Vertical placement of the tooltip. Default: `Position.Top` */\n  verticalPlacement?: Position | string | undefined;\n  /** Vertical shift of the tooltip in pixels. Works only with\n   * `verticalPlacement` set to `Position.Top` or `Position.Bottom`.\n   * Default: `0` */\n  verticalShift?: number;\n  /** Defines the content of the tooltip and hovering over which elements should trigger it.\n   * An object containing properties in the following format:\n   *\n   * ```\n   * {\n   *   [selectorString]: (d: unknown) => string | HTMLElement\n   * }\n   * ```\n   * e.g.:\n   * ```\n   * {\n   *   [Area.selectors.area]: (d: AreaDatum[]) => `<div>${d.value.toString()}</div>\n   * }\n   * ```\n   */\n  triggers?: {\n    [selector: string]: ((data: any, i: number, elements: (HTMLElement | SVGElement)[]) => string | HTMLElement | undefined | null | void) | undefined | null;\n  };\n  /** Custom DOM attributes for the tooltip. Useful when you need to refer to a specific tooltip instance\n   * by using a CSS selector. Attributes configuration object has the following structure:\n   *\n   * ```\n   * {\n   *   [attributeName]: attribute value\n   * }\n   * ```\n   * e.g.:\n   * ```\n   * {\n   *   'type': 'area-tooltip',\n   *   'value': 42\n   * }\n   * ```\n   */\n  attributes?: { [attr: string]: string | number | boolean };\n  /** Custom class name for the tooltip. Default: `undefined` */\n  className?: string;\n}\n\nexport const TooltipDefaultConfig: TooltipConfigInterface = {\n  components: [],\n  container: undefined,\n  followCursor: true,\n  allowHover: true,\n  horizontalPlacement: Position.Auto,\n  horizontalShift: 0,\n  verticalPlacement: Position.Top,\n  verticalShift: 0,\n  attributes: {},\n  triggers: {},\n  className: undefined,\n}\n\n"],"names":[],"mappings":";;AAGA;AAiEa,MAAA,oBAAoB,GAA2B;AAC1D,IAAA,UAAU,EAAE,EAAE;AACd,IAAA,SAAS,EAAE,SAAS;AACpB,IAAA,YAAY,EAAE,IAAI;AAClB,IAAA,UAAU,EAAE,IAAI;IAChB,mBAAmB,EAAE,QAAQ,CAAC,IAAI;AAClC,IAAA,eAAe,EAAE,CAAC;IAClB,iBAAiB,EAAE,QAAQ,CAAC,GAAG;AAC/B,IAAA,aAAa,EAAE,CAAC;AAChB,IAAA,UAAU,EAAE,EAAE;AACd,IAAA,QAAQ,EAAE,EAAE;AACZ,IAAA,SAAS,EAAE,SAAS;;;;;"}